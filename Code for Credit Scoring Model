import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report, roc_auc_score, confusion_matrix

# Step 1: Load the dataset
# Load your dataset
df = pd.read_csv('credit_data.csv')  # Replace 'credit_data.csv' with your dataset

# Show the first few rows of the dataset
print(df.head())

# Step 2: Data Cleaning
# Check for missing values
print("Missing values in each column:")
print(df.isnull().sum())

# Handle missing values - drop rows with missing values or fill with median
df = df.dropna()  # Drop rows with missing values

# Step 3: Feature Encoding & Scaling
# Label Encoding for categorical variables (assuming 'job_type' and 'credit_history' are categorical)
le = LabelEncoder()
df['job_type'] = le.fit_transform(df['job_type'])
df['credit_history'] = le.fit_transform(df['credit_history'])

# Scaling numerical features like 'age' and 'income' using StandardScaler
scaler = StandardScaler()
df[['age', 'income']] = scaler.fit_transform(df[['age', 'income']])

# Step 4: Define Features and Target Variable
# Assume the target column is 'target' (whether the person defaulted)
X = df.drop('target', axis=1)  # Features
y = df['target']  # Target variable

# Step 5: Split the Dataset into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 6: Build and Train Models
# Logistic Regression
lr = LogisticRegression()
lr.fit(X_train, y_train)

# Decision Tree Classifier
dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)

# Support Vector Machine (SVM)
svm = SVC(probability=True)
svm.fit(X_train, y_train)

# Step 7: Predict and Evaluate Models

# Logistic Regression Predictions and Evaluation
y_pred_lr = lr.predict(X_test)
print("\nLogistic Regression Classification Report:\n", classification_report(y_test, y_pred_lr))
print("Logistic Regression AUC-ROC Score:", roc_auc_score(y_test, y_pred_lr))

# Decision Tree Predictions and Evaluation
y_pred_dt = dt.predict(X_test)
print("\nDecision Tree Classification Report:\n", classification_report(y_test, y_pred_dt))
print("Decision Tree AUC-ROC Score:", roc_auc_score(y_test, y_pred_dt))

# SVM Predictions and Evaluation
y_pred_svm = svm.predict(X_test)
print("\nSVM Classification Report:\n", classification_report(y_test, y_pred_svm))
print("SVM AUC-ROC Score:", roc_auc_score(y_test, y_pred_svm))

# Step 8: Confusion Matrix for Logistic Regression (for visualization)
cm_lr = confusion_matrix(y_test, y_pred_lr)
plt.figure(figsize=(5, 5))
plt.matshow(cm_lr, cmap='Blues', fignum=1)
plt.title('Confusion Matrix - Logistic Regression')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.colorbar()
plt.show()
